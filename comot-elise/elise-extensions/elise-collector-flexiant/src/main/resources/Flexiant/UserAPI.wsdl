<?xml version="1.0" encoding="UTF-8"?><!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.6. --><definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://extility.flexiant.net" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="UserAPI" targetNamespace="http://extility.flexiant.net">
  <types>
    <xsd:schema>
      <xsd:import namespace="http://extility.flexiant.net" schemaLocation="UserAPI_schema1.xsd"/>
    </xsd:schema>
  </types>
  <message name="createGroup">
    <part element="tns:createGroup" name="parameters"/>
  </message>
  <message name="createGroupResponse">
    <part element="tns:createGroupResponse" name="parameters"/>
  </message>
  <message name="ExtilityException">
    <part element="tns:ExtilityException" name="fault"/>
  </message>
  <message name="fetchResource">
    <part element="tns:fetchResource" name="parameters"/>
  </message>
  <message name="fetchResourceResponse">
    <part element="tns:fetchResourceResponse" name="parameters"/>
  </message>
  <message name="fetchServer">
    <part element="tns:fetchServer" name="parameters"/>
  </message>
  <message name="fetchServerResponse">
    <part element="tns:fetchServerResponse" name="parameters"/>
  </message>
  <message name="fetchDisk">
    <part element="tns:fetchDisk" name="parameters"/>
  </message>
  <message name="fetchDiskResponse">
    <part element="tns:fetchDiskResponse" name="parameters"/>
  </message>
  <message name="modifyResource">
    <part element="tns:modifyResource" name="parameters"/>
  </message>
  <message name="modifyResourceResponse">
    <part element="tns:modifyResourceResponse" name="parameters"/>
  </message>
  <message name="deleteResource">
    <part element="tns:deleteResource" name="parameters"/>
  </message>
  <message name="deleteResourceResponse">
    <part element="tns:deleteResourceResponse" name="parameters"/>
  </message>
  <message name="addKey">
    <part element="tns:addKey" name="parameters"/>
  </message>
  <message name="addKeyResponse">
    <part element="tns:addKeyResponse" name="parameters"/>
  </message>
  <message name="removeKey">
    <part element="tns:removeKey" name="parameters"/>
  </message>
  <message name="removeKeyResponse">
    <part element="tns:removeKeyResponse" name="parameters"/>
  </message>
  <message name="modifyKey">
    <part element="tns:modifyKey" name="parameters"/>
  </message>
  <message name="modifyKeyResponse">
    <part element="tns:modifyKeyResponse" name="parameters"/>
  </message>
  <message name="revertToResource">
    <part element="tns:revertToResource" name="parameters"/>
  </message>
  <message name="revertToResourceResponse">
    <part element="tns:revertToResourceResponse" name="parameters"/>
  </message>
  <message name="createServer">
    <part element="tns:createServer" name="parameters"/>
  </message>
  <message name="createServerResponse">
    <part element="tns:createServerResponse" name="parameters"/>
  </message>
  <message name="modifyServer">
    <part element="tns:modifyServer" name="parameters"/>
  </message>
  <message name="modifyServerResponse">
    <part element="tns:modifyServerResponse" name="parameters"/>
  </message>
  <message name="attachDisk">
    <part element="tns:attachDisk" name="parameters"/>
  </message>
  <message name="attachDiskResponse">
    <part element="tns:attachDiskResponse" name="parameters"/>
  </message>
  <message name="detachDisk">
    <part element="tns:detachDisk" name="parameters"/>
  </message>
  <message name="detachDiskResponse">
    <part element="tns:detachDiskResponse" name="parameters"/>
  </message>
  <message name="attachNetworkInterface">
    <part element="tns:attachNetworkInterface" name="parameters"/>
  </message>
  <message name="attachNetworkInterfaceResponse">
    <part element="tns:attachNetworkInterfaceResponse" name="parameters"/>
  </message>
  <message name="detachNetworkInterface">
    <part element="tns:detachNetworkInterface" name="parameters"/>
  </message>
  <message name="detachNetworkInterfaceResponse">
    <part element="tns:detachNetworkInterfaceResponse" name="parameters"/>
  </message>
  <message name="attachSSHKey">
    <part element="tns:attachSSHKey" name="parameters"/>
  </message>
  <message name="attachSSHKeyResponse">
    <part element="tns:attachSSHKeyResponse" name="parameters"/>
  </message>
  <message name="detachSSHKey">
    <part element="tns:detachSSHKey" name="parameters"/>
  </message>
  <message name="detachSSHKeyResponse">
    <part element="tns:detachSSHKeyResponse" name="parameters"/>
  </message>
  <message name="changeServerStatus">
    <part element="tns:changeServerStatus" name="parameters"/>
  </message>
  <message name="changeServerStatusResponse">
    <part element="tns:changeServerStatusResponse" name="parameters"/>
  </message>
  <message name="openVNCConnection">
    <part element="tns:openVNCConnection" name="parameters"/>
  </message>
  <message name="openVNCConnectionResponse">
    <part element="tns:openVNCConnectionResponse" name="parameters"/>
  </message>
  <message name="createDisk">
    <part element="tns:createDisk" name="parameters"/>
  </message>
  <message name="createDiskResponse">
    <part element="tns:createDiskResponse" name="parameters"/>
  </message>
  <message name="modifyDisk">
    <part element="tns:modifyDisk" name="parameters"/>
  </message>
  <message name="modifyDiskResponse">
    <part element="tns:modifyDiskResponse" name="parameters"/>
  </message>
  <message name="createSnapshot">
    <part element="tns:createSnapshot" name="parameters"/>
  </message>
  <message name="createSnapshotResponse">
    <part element="tns:createSnapshotResponse" name="parameters"/>
  </message>
  <message name="modifySnapshot">
    <part element="tns:modifySnapshot" name="parameters"/>
  </message>
  <message name="modifySnapshotResponse">
    <part element="tns:modifySnapshotResponse" name="parameters"/>
  </message>
  <message name="createNetwork">
    <part element="tns:createNetwork" name="parameters"/>
  </message>
  <message name="createNetworkResponse">
    <part element="tns:createNetworkResponse" name="parameters"/>
  </message>
  <message name="modifyNetwork">
    <part element="tns:modifyNetwork" name="parameters"/>
  </message>
  <message name="modifyNetworkResponse">
    <part element="tns:modifyNetworkResponse" name="parameters"/>
  </message>
  <message name="attachSubnet">
    <part element="tns:attachSubnet" name="parameters"/>
  </message>
  <message name="attachSubnetResponse">
    <part element="tns:attachSubnetResponse" name="parameters"/>
  </message>
  <message name="createSubnet">
    <part element="tns:createSubnet" name="parameters"/>
  </message>
  <message name="createSubnetResponse">
    <part element="tns:createSubnetResponse" name="parameters"/>
  </message>
  <message name="modifySubnet">
    <part element="tns:modifySubnet" name="parameters"/>
  </message>
  <message name="modifySubnetResponse">
    <part element="tns:modifySubnetResponse" name="parameters"/>
  </message>
  <message name="createFirewallTemplate">
    <part element="tns:createFirewallTemplate" name="parameters"/>
  </message>
  <message name="createFirewallTemplateResponse">
    <part element="tns:createFirewallTemplateResponse" name="parameters"/>
  </message>
  <message name="modifyFirewallTemplate">
    <part element="tns:modifyFirewallTemplate" name="parameters"/>
  </message>
  <message name="modifyFirewallTemplateResponse">
    <part element="tns:modifyFirewallTemplateResponse" name="parameters"/>
  </message>
  <message name="applyFirewallTemplate">
    <part element="tns:applyFirewallTemplate" name="parameters"/>
  </message>
  <message name="applyFirewallTemplateResponse">
    <part element="tns:applyFirewallTemplateResponse" name="parameters"/>
  </message>
  <message name="createSSHKey">
    <part element="tns:createSSHKey" name="parameters"/>
  </message>
  <message name="createSSHKeyResponse">
    <part element="tns:createSSHKeyResponse" name="parameters"/>
  </message>
  <message name="modifySSHKey">
    <part element="tns:modifySSHKey" name="parameters"/>
  </message>
  <message name="modifySSHKeyResponse">
    <part element="tns:modifySSHKeyResponse" name="parameters"/>
  </message>
  <message name="createNetworkInterface">
    <part element="tns:createNetworkInterface" name="parameters"/>
  </message>
  <message name="createNetworkInterfaceResponse">
    <part element="tns:createNetworkInterfaceResponse" name="parameters"/>
  </message>
  <message name="modifyGroup">
    <part element="tns:modifyGroup" name="parameters"/>
  </message>
  <message name="modifyGroupResponse">
    <part element="tns:modifyGroupResponse" name="parameters"/>
  </message>
  <message name="modifyNetworkInterface">
    <part element="tns:modifyNetworkInterface" name="parameters"/>
  </message>
  <message name="modifyNetworkInterfaceResponse">
    <part element="tns:modifyNetworkInterfaceResponse" name="parameters"/>
  </message>
  <message name="modifyPaymentMethodInstance">
    <part element="tns:modifyPaymentMethodInstance" name="parameters"/>
  </message>
  <message name="modifyPaymentMethodInstanceResponse">
    <part element="tns:modifyPaymentMethodInstanceResponse" name="parameters"/>
  </message>
  <message name="addIP">
    <part element="tns:addIP" name="parameters"/>
  </message>
  <message name="addIPResponse">
    <part element="tns:addIPResponse" name="parameters"/>
  </message>
  <message name="removeIP">
    <part element="tns:removeIP" name="parameters"/>
  </message>
  <message name="removeIPResponse">
    <part element="tns:removeIPResponse" name="parameters"/>
  </message>
  <message name="createVDC">
    <part element="tns:createVDC" name="parameters"/>
  </message>
  <message name="createVDCResponse">
    <part element="tns:createVDCResponse" name="parameters"/>
  </message>
  <message name="modifyVDC">
    <part element="tns:modifyVDC" name="parameters"/>
  </message>
  <message name="modifyVDCResponse">
    <part element="tns:modifyVDCResponse" name="parameters"/>
  </message>
  <message name="createImage">
    <part element="tns:createImage" name="parameters"/>
  </message>
  <message name="createImageResponse">
    <part element="tns:createImageResponse" name="parameters"/>
  </message>
  <message name="modifyImage">
    <part element="tns:modifyImage" name="parameters"/>
  </message>
  <message name="modifyImageResponse">
    <part element="tns:modifyImageResponse" name="parameters"/>
  </message>
  <message name="modifyFirewall">
    <part element="tns:modifyFirewall" name="parameters"/>
  </message>
  <message name="modifyFirewallResponse">
    <part element="tns:modifyFirewallResponse" name="parameters"/>
  </message>
  <message name="cancelJob">
    <part element="tns:cancelJob" name="parameters"/>
  </message>
  <message name="cancelJobResponse">
    <part element="tns:cancelJobResponse" name="parameters"/>
  </message>
  <message name="waitForJob">
    <part element="tns:waitForJob" name="parameters"/>
  </message>
  <message name="waitForJobResponse">
    <part element="tns:waitForJobResponse" name="parameters"/>
  </message>
  <message name="getResourceTypes">
    <part element="tns:getResourceTypes" name="parameters"/>
  </message>
  <message name="getResourceTypesResponse">
    <part element="tns:getResourceTypesResponse" name="parameters"/>
  </message>
  <message name="listResources">
    <part element="tns:listResources" name="parameters"/>
  </message>
  <message name="listResourcesResponse">
    <part element="tns:listResourcesResponse" name="parameters"/>
  </message>
  <message name="updateMetadata">
    <part element="tns:updateMetadata" name="parameters"/>
  </message>
  <message name="updateMetadataResponse">
    <part element="tns:updateMetadataResponse" name="parameters"/>
  </message>
  <message name="listProductPurchases">
    <part element="tns:listProductPurchases" name="parameters"/>
  </message>
  <message name="listProductPurchasesResponse">
    <part element="tns:listProductPurchasesResponse" name="parameters"/>
  </message>
  <message name="listUnitTransactions">
    <part element="tns:listUnitTransactions" name="parameters"/>
  </message>
  <message name="listUnitTransactionsResponse">
    <part element="tns:listUnitTransactionsResponse" name="parameters"/>
  </message>
  <message name="listUnitTransactionSummary">
    <part element="tns:listUnitTransactionSummary" name="parameters"/>
  </message>
  <message name="listUnitTransactionSummaryResponse">
    <part element="tns:listUnitTransactionSummaryResponse" name="parameters"/>
  </message>
  <message name="listStatementDetail">
    <part element="tns:listStatementDetail" name="parameters"/>
  </message>
  <message name="listStatementDetailResponse">
    <part element="tns:listStatementDetailResponse" name="parameters"/>
  </message>
  <message name="revokeImage">
    <part element="tns:revokeImage" name="parameters"/>
  </message>
  <message name="revokeImageResponse">
    <part element="tns:revokeImageResponse" name="parameters"/>
  </message>
  <message name="revokeResource">
    <part element="tns:revokeResource" name="parameters"/>
  </message>
  <message name="revokeResourceResponse">
    <part element="tns:revokeResourceResponse" name="parameters"/>
  </message>
  <message name="cloneResource">
    <part element="tns:cloneResource" name="parameters"/>
  </message>
  <message name="cloneResourceResponse">
    <part element="tns:cloneResourceResponse" name="parameters"/>
  </message>
  <message name="doQuery">
    <part element="tns:doQuery" name="parameters"/>
  </message>
  <message name="doQueryResponse">
    <part element="tns:doQueryResponse" name="parameters"/>
  </message>
  <message name="getMeasuredValues">
    <part element="tns:getMeasuredValues" name="parameters"/>
  </message>
  <message name="getMeasuredValuesResponse">
    <part element="tns:getMeasuredValuesResponse" name="parameters"/>
  </message>
  <message name="getHypervisorConfig">
    <part element="tns:getHypervisorConfig" name="parameters"/>
  </message>
  <message name="getHypervisorConfigResponse">
    <part element="tns:getHypervisorConfigResponse" name="parameters"/>
  </message>
  <message name="setPermissions">
    <part element="tns:setPermissions" name="parameters"/>
  </message>
  <message name="setPermissionsResponse">
    <part element="tns:setPermissionsResponse" name="parameters"/>
  </message>
  <message name="listPermissions">
    <part element="tns:listPermissions" name="parameters"/>
  </message>
  <message name="listPermissionsResponse">
    <part element="tns:listPermissionsResponse" name="parameters"/>
  </message>
  <message name="isPermitted">
    <part element="tns:isPermitted" name="parameters"/>
  </message>
  <message name="isPermittedResponse">
    <part element="tns:isPermittedResponse" name="parameters"/>
  </message>
  <message name="addUserToGroup">
    <part element="tns:addUserToGroup" name="parameters"/>
  </message>
  <message name="addUserToGroupResponse">
    <part element="tns:addUserToGroupResponse" name="parameters"/>
  </message>
  <message name="deleteUserFromGroup">
    <part element="tns:deleteUserFromGroup" name="parameters"/>
  </message>
  <message name="deleteUserFromGroupResponse">
    <part element="tns:deleteUserFromGroupResponse" name="parameters"/>
  </message>
  <message name="lockUser">
    <part element="tns:lockUser" name="parameters"/>
  </message>
  <message name="lockUserResponse">
    <part element="tns:lockUserResponse" name="parameters"/>
  </message>
  <message name="unlockUser">
    <part element="tns:unlockUser" name="parameters"/>
  </message>
  <message name="unlockUserResponse">
    <part element="tns:unlockUserResponse" name="parameters"/>
  </message>
  <message name="updateUser">
    <part element="tns:updateUser" name="parameters"/>
  </message>
  <message name="updateUserResponse">
    <part element="tns:updateUserResponse" name="parameters"/>
  </message>
  <message name="publishImage">
    <part element="tns:publishImage" name="parameters"/>
  </message>
  <message name="publishImageResponse">
    <part element="tns:publishImageResponse" name="parameters"/>
  </message>
  <message name="publishResource">
    <part element="tns:publishResource" name="parameters"/>
  </message>
  <message name="publishResourceResponse">
    <part element="tns:publishResourceResponse" name="parameters"/>
  </message>
  <message name="updateCustomer">
    <part element="tns:updateCustomer" name="parameters"/>
  </message>
  <message name="updateCustomerResponse">
    <part element="tns:updateCustomerResponse" name="parameters"/>
  </message>
  <message name="listReferralPromoCode">
    <part element="tns:listReferralPromoCode" name="parameters"/>
  </message>
  <message name="listReferralPromoCodeResponse">
    <part element="tns:listReferralPromoCodeResponse" name="parameters"/>
  </message>
  <message name="deleteReferralPromoCode">
    <part element="tns:deleteReferralPromoCode" name="parameters"/>
  </message>
  <message name="deleteReferralPromoCodeResponse">
    <part element="tns:deleteReferralPromoCodeResponse" name="parameters"/>
  </message>
  <message name="createReferralPromoCode">
    <part element="tns:createReferralPromoCode" name="parameters"/>
  </message>
  <message name="createReferralPromoCodeResponse">
    <part element="tns:createReferralPromoCodeResponse" name="parameters"/>
  </message>
  <message name="createDeploymentTemplate">
    <part element="tns:createDeploymentTemplate" name="parameters"/>
  </message>
  <message name="createDeploymentTemplateResponse">
    <part element="tns:createDeploymentTemplateResponse" name="parameters"/>
  </message>
  <message name="dryRunTemplate">
    <part element="tns:dryRunTemplate" name="parameters"/>
  </message>
  <message name="dryRunTemplateResponse">
    <part element="tns:dryRunTemplateResponse" name="parameters"/>
  </message>
  <message name="deployTemplate">
    <part element="tns:deployTemplate" name="parameters"/>
  </message>
  <message name="deployTemplateResponse">
    <part element="tns:deployTemplateResponse" name="parameters"/>
  </message>
  <message name="changeDeploymentInstanceStatus">
    <part element="tns:changeDeploymentInstanceStatus" name="parameters"/>
  </message>
  <message name="changeDeploymentInstanceStatusResponse">
    <part element="tns:changeDeploymentInstanceStatusResponse" name="parameters"/>
  </message>
  <message name="modifyDeploymentTemplate">
    <part element="tns:modifyDeploymentTemplate" name="parameters"/>
  </message>
  <message name="modifyDeploymentTemplateResponse">
    <part element="tns:modifyDeploymentTemplateResponse" name="parameters"/>
  </message>
  <message name="modifyDeploymentInstance">
    <part element="tns:modifyDeploymentInstance" name="parameters"/>
  </message>
  <message name="modifyDeploymentInstanceResponse">
    <part element="tns:modifyDeploymentInstanceResponse" name="parameters"/>
  </message>
  <message name="createDeploymentTemplateFromInstance">
    <part element="tns:createDeploymentTemplateFromInstance" name="parameters"/>
  </message>
  <message name="createDeploymentTemplateFromInstanceResponse">
    <part element="tns:createDeploymentTemplateFromInstanceResponse" name="parameters"/>
  </message>
  <message name="createBlob">
    <part element="tns:createBlob" name="parameters"/>
  </message>
  <message name="createBlobResponse">
    <part element="tns:createBlobResponse" name="parameters"/>
  </message>
  <message name="payInvoice">
    <part element="tns:payInvoice" name="parameters"/>
  </message>
  <message name="payInvoiceResponse">
    <part element="tns:payInvoiceResponse" name="parameters"/>
  </message>
  <message name="createPaymentMethodInstance">
    <part element="tns:createPaymentMethodInstance" name="parameters"/>
  </message>
  <message name="createPaymentMethodInstanceResponse">
    <part element="tns:createPaymentMethodInstanceResponse" name="parameters"/>
  </message>
  <message name="resumeTransaction">
    <part element="tns:resumeTransaction" name="parameters"/>
  </message>
  <message name="resumeTransactionResponse">
    <part element="tns:resumeTransactionResponse" name="parameters"/>
  </message>
  <message name="cancelTransaction">
    <part element="tns:cancelTransaction" name="parameters"/>
  </message>
  <message name="cancelTransactionResponse">
    <part element="tns:cancelTransactionResponse" name="parameters"/>
  </message>
  <message name="testPaymentMethod">
    <part element="tns:testPaymentMethod" name="parameters"/>
  </message>
  <message name="testPaymentMethodResponse">
    <part element="tns:testPaymentMethodResponse" name="parameters"/>
  </message>
  <message name="purchaseUnits">
    <part element="tns:purchaseUnits" name="parameters"/>
  </message>
  <message name="purchaseUnitsResponse">
    <part element="tns:purchaseUnitsResponse" name="parameters"/>
  </message>
  <message name="renderInvoice">
    <part element="tns:renderInvoice" name="parameters"/>
  </message>
  <message name="renderInvoiceResponse">
    <part element="tns:renderInvoiceResponse" name="parameters"/>
  </message>
  <message name="getBlobContent">
    <part element="tns:getBlobContent" name="parameters"/>
  </message>
  <message name="getBlobContentResponse">
    <part element="tns:getBlobContentResponse" name="parameters"/>
  </message>
  <portType name="UserService">
    <operation name="createGroup"><documentation><![CDATA[<p>This function will create a new empty group.</p><p>The group cannot be created pre-populated with users; use addUserToGroup to add the users after creation.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createGroup"/>
      <output message="tns:createGroupResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="fetchResource"><documentation><![CDATA[<p>This function will fetch a resource (such as a disk, image or server) over the internet, using the parameters supplied.</p><p>If the boolean parameter makeImage is set to true, then the call will create an image, else it will create a disk or a server, dependent upon the resource fetched and what the cluster supports.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:fetchResource"/>
      <output message="tns:fetchResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="fetchServer"><documentation><![CDATA[<p>This function will fetch a server over the internet, using the parameters supplied.</p><p>If the boolean parameter makeImage is set to true, then the call will create an image, else it will create a server, dependent upon the resource fetched and what the cluster supports.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:fetchServer"/>
      <output message="tns:fetchServerResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="fetchDisk"><documentation><![CDATA[<p>This function will fetch a disk over the internet, using the parameters supplied.</p><p>If the boolean parameter makeImage is set to true, then the call will create an image, else it will create a disk dependent upon the resource fetched and what the cluster supports.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:fetchDisk"/>
      <output message="tns:fetchDiskResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyResource"><documentation><![CDATA[<p>This function will modify an existing resource object.</p><p>A new object is passed in which forms the basis of the modified object. The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyResource"/>
      <output message="tns:modifyResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="deleteResource"><documentation><![CDATA[<p>This function will delete an existing resource object.</p><p>If cascade is set to true, a 'deep delete' is performed, and each of dependent child resource will be deleted. If cascade is false, an exception will be thrown if there are child objects.</p><p>Note that jobs are deleted synchronously; deleting a job does not create another job.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not deleted.</p>]]></documentation>
      <input message="tns:deleteResource"/>
      <output message="tns:deleteResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="addKey"><documentation><![CDATA[<p>This function will add keys to the given resource object.</p><p>On successful execution, the resource object will be returned with the added key in it. On an exception, the key will not be added.</p>]]></documentation>
      <input message="tns:addKey"/>
      <output message="tns:addKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="removeKey"><documentation><![CDATA[<p>This function will remove keys from the given resource object.</p><p>On successful execution, the resource object is returned with the given key removed. On an exception, the key will not be removed from Resource.</p>]]></documentation>
      <input message="tns:removeKey"/>
      <output message="tns:removeKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyKey"><documentation><![CDATA[<p>This function will modify an existing resource key for a given resource object.</p><p>On successful execution, the resource object will be returned with the modified key object. On an exception, the key will not be modified</p>]]></documentation>
      <input message="tns:modifyKey"/>
      <output message="tns:modifyKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="revertToResource"><documentation><![CDATA[<p>This function will revert all the changes of a resource object, back to its template.</p><p>For instance, this call can be used to revert a server or a disk back to its original snapshot.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not reverted.</p>]]></documentation>
      <input message="tns:revertToResource"/>
      <output message="tns:revertToResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createServer"><documentation><![CDATA[<p>This function will create a server using the supplied skeleton object.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createServer"/>
      <output message="tns:createServerResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyServer"><documentation><![CDATA[<p>This function will modify an existing server object.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyServer"/>
      <output message="tns:modifyServerResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="attachDisk"><documentation><![CDATA[<p>This function will attach a disk to an existing server.</p><p>The server must not be running when the call is made.</p><p>The index parameter is an integer specifying the position in the list of disks that the disk in question should take,  When index is 0 disk is added to the first position, only if no disks are attached to the given server, otherwise is added in the last position. Other disks will be shuffled around appropriately.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not attached.</p>]]></documentation>
      <input message="tns:attachDisk"/>
      <output message="tns:attachDiskResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="detachDisk"><documentation><![CDATA[<p>This function will detach a disk from an existing server.</p><p>The server must not be running when the call is made.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not detached.</p>]]></documentation>
      <input message="tns:detachDisk"/>
      <output message="tns:detachDiskResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="attachNetworkInterface"><documentation><![CDATA[<p>This function will attach a network interface to a given server.</p><p>The server must not be running when the call is made.</p><p>The index parameter is an integer specifying the position in the list of network interfaces that the network interface in question should take. When index is 0 network interface is added to the first position, only if no network interfaces are attached to the given server, otherwise is added in the last position. Other network interfaces will be shuffled around appropriately.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:attachNetworkInterface"/>
      <output message="tns:attachNetworkInterfaceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="detachNetworkInterface"><documentation><![CDATA[<p>This function will detach a network interface from a given server.</p><p>The server must not be running when the call is made.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not detached.</p>]]></documentation>
      <input message="tns:detachNetworkInterface"/>
      <output message="tns:detachNetworkInterfaceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="attachSSHKey"><documentation><![CDATA[<p>This function will attach an SSH key to a given server.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not attached.</p>]]></documentation>
      <input message="tns:attachSSHKey"/>
      <output message="tns:attachSSHKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="detachSSHKey"><documentation><![CDATA[<p>This function will detach an SSH key to a given server.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not detached.</p>]]></documentation>
      <input message="tns:detachSSHKey"/>
      <output message="tns:detachSSHKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="changeServerStatus"><documentation><![CDATA[<p>This function will change the state of (start, stop, kill or reboot) a server.</p><p>The 'safe' parameter when set will ensure that a clean shutdown is always performed.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:changeServerStatus"/>
      <output message="tns:changeServerStatusResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="openVNCConnection"><documentation><![CDATA[<p>This function will open virtual network connection for a given server.</p><p>On successful execution, the VNC Connection object is returned, and a connection can be opened at any point in an interval configurable by the licensee.</p><p>On an exception, the connection will not be opened</p>]]></documentation>
      <input message="tns:openVNCConnection"/>
      <output message="tns:openVNCConnectionResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createDisk"><documentation><![CDATA[<p>This function will create a disk, and optionally attach it to a server.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created or attached.</p>]]></documentation>
      <input message="tns:createDisk"/>
      <output message="tns:createDiskResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyDisk"><documentation><![CDATA[<p>This function will modify a disk object.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyDisk"/>
      <output message="tns:modifyDiskResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createSnapshot"><documentation><![CDATA[<p>This function will create a snapshot object from a disk or a server.</p><p>Whether a snapshot object can be created from a disk or a server will depend on the capabilities of the cluster containing the disk or the server concerned.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createSnapshot"/>
      <output message="tns:createSnapshotResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifySnapshot"><documentation><![CDATA[<p>This function will modify an existing snapshot.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifySnapshot"/>
      <output message="tns:modifySnapshotResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createNetwork"><documentation><![CDATA[<p>This function will create a network.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createNetwork"/>
      <output message="tns:createNetworkResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyNetwork"><documentation><![CDATA[<p>This function will modify a network object.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyNetwork"/>
      <output message="tns:modifyNetworkResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="attachSubnet"><documentation><![CDATA[<p>This function will attach a subnet an existing network.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not attached.</p>]]></documentation>
      <input message="tns:attachSubnet"/>
      <output message="tns:attachSubnetResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createSubnet"><documentation><![CDATA[<p>This function will create a subnet.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createSubnet"/>
      <output message="tns:createSubnetResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifySubnet"><documentation><![CDATA[<p>This function will modify a subnet.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifySubnet"/>
      <output message="tns:modifySubnetResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createFirewallTemplate"><documentation><![CDATA[<p>This function will create a firewall template.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createFirewallTemplate"/>
      <output message="tns:createFirewallTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyFirewallTemplate"><documentation><![CDATA[<p>This function will modify a firewall template</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyFirewallTemplate"/>
      <output message="tns:modifyFirewallTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="applyFirewallTemplate"><documentation><![CDATA[<p>This function will apply a firewall template to a given IP address.</p><p>IPv4 firewall templates can only be applied to IPv4 addresses, and IPv6 firewall templates can only be applied to IPv6 addresses.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the firewall template is not applied.</p>]]></documentation>
      <input message="tns:applyFirewallTemplate"/>
      <output message="tns:applyFirewallTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createSSHKey"><documentation><![CDATA[<p>This function will create an ssh key.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:createSSHKey"/>
      <output message="tns:createSSHKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifySSHKey"><documentation><![CDATA[<p>This function will modify an ssh key.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifySSHKey"/>
      <output message="tns:modifySSHKeyResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createNetworkInterface"><documentation><![CDATA[<p>This function will create a network interface.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:createNetworkInterface"/>
      <output message="tns:createNetworkInterfaceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyGroup"><documentation><![CDATA[<p>This function will modify a group.</p><p>Note that this function is not intended for use to change the membership of a group.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyGroup"/>
      <output message="tns:modifyGroupResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyNetworkInterface"><documentation><![CDATA[<p>This function will modify a network interface.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyNetworkInterface"/>
      <output message="tns:modifyNetworkInterfaceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyPaymentMethodInstance"><documentation><![CDATA[<p>This function will modify a payment method instance.</p><p>This will only allow the default flag and the resource name to be modified.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyPaymentMethodInstance"/>
      <output message="tns:modifyPaymentMethodInstanceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="addIP"><documentation><![CDATA[<p>This function will add an IP address to a network interface.</p><p>Please note that you will only be able to have one IPv4 address set as 'auto' in a network interface. An automatic IPv6 address is set on the network interface at creation time and can not be altered.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:addIP"/>
      <output message="tns:addIPResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="removeIP"><documentation><![CDATA[<p>This function will remove an IP address from a network interface.</p><p>Note that you can only remove IPv4 addresses from network interfaces; IPv6 addresses are permanently assigned.</p><p>Removing an IP address from the NIC will result in any firewall associated with that IP address getting removed as well.</p><p>Please note: if the network interface is linked to a IP network, removing the IP address of the NIC will mean that you will lose the IP address concerned.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:removeIP"/>
      <output message="tns:removeIPResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createVDC"><documentation><![CDATA[<p>This function will create a virtual data centre.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createVDC"/>
      <output message="tns:createVDCResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyVDC"><documentation><![CDATA[<p>This function will modify virtual data centre.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyVDC"/>
      <output message="tns:modifyVDCResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createImage"><documentation><![CDATA[<p>This function will create an image from a server or disk.</p><p>Whether a server or disk can be used depends on the capabilities of the cluster concerned.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not created.</p>]]></documentation>
      <input message="tns:createImage"/>
      <output message="tns:createImageResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyImage"><documentation><![CDATA[<p>This function will modify an image.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyImage"/>
      <output message="tns:modifyImageResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyFirewall"><documentation><![CDATA[<p>This function will modify a firewall.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyFirewall"/>
      <output message="tns:modifyFirewallResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="cancelJob"><documentation><![CDATA[<p>This function will cancel a job.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the job is not cancelled.</p>]]></documentation>
      <input message="tns:cancelJob"/>
      <output message="tns:cancelJobResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="waitForJob"><documentation><![CDATA[<p>This function will wait for a job to complete.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the wait is not completed.</p>]]></documentation>
      <input message="tns:waitForJob"/>
      <output message="tns:waitForJobResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="getResourceTypes"><documentation><![CDATA[<p>This function will return list of available resource types.</p><p>Each of the resource types returned may be used as in a filter passed to listResources.</p><p>On successful execution, a list of resource types will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:getResourceTypes"/>
      <output message="tns:getResourceTypesResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listResources"><documentation><![CDATA[<p>This function will return list of resources after satisfying a filter.</p><p>The resource types can be chosen from the ResourceType enum, the possible values of which are returned by the getResourceTypes call. Where no resource type is given, the resource type defaults to RESOURCE and all resource objects satisfying the filter; the resource objects are returned as simple resource objects in this case. If a specific resource type other than RESOURCE is specified, the objects returned are fully populated.</p><p>On successful execution, a list of resource objects will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:listResources"/>
      <output message="tns:listResourcesResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="updateMetadata"><documentation><![CDATA[<p>This function will update the metadata attached to a resource.</p><p>On successful execution, true is returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:updateMetadata"/>
      <output message="tns:updateMetadataResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listProductPurchases"><documentation><![CDATA[<p>This function will list the product purchases matching a given filter.</p><p>On successful execution, a list of product purchases will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:listProductPurchases"/>
      <output message="tns:listProductPurchasesResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listUnitTransactions"><documentation><![CDATA[<p>This function will list the unit transactions matching a given filter.</p><p>On successful execution, a list of unit transactions will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:listUnitTransactions"/>
      <output message="tns:listUnitTransactionsResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listUnitTransactionSummary"><documentation><![CDATA[<p>This function will list the unit transaction summaries matching a given filter.</p><p>On successful execution, a list of unit transaction summaries will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:listUnitTransactionSummary"/>
      <output message="tns:listUnitTransactionSummaryResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listStatementDetail"><documentation><![CDATA[<p>This function will list the statement details matching a given filter.</p><p>On successful execution, a list of statement details will be returned. On an exception, an empty list is returned.</p>]]></documentation>
      <input message="tns:listStatementDetail"/>
      <output message="tns:listStatementDetailResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="revokeImage"><documentation><![CDATA[<p>This function will revoke the publication of an image to a Customer or Billing Entity.</p>]]></documentation>
      <input message="tns:revokeImage"/>
      <output message="tns:revokeImageResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="revokeResource"><documentation><![CDATA[<p>This function will revoke the publication of an image/template to a Customer or Billing Entity.</p>]]></documentation>
      <input message="tns:revokeResource"/>
      <output message="tns:revokeResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="cloneResource"><documentation><![CDATA[<p>This function will clone a snapshot resource.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not cloned.</p>]]></documentation>
      <input message="tns:cloneResource"/>
      <output message="tns:cloneResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="doQuery"><documentation><![CDATA[<p>This function will query the database, aggregating and grouping results if relevant.</p><p>Queries may only be made on a particular resource type; resource type for this purposes includes pseudo-resources such as unit transactions, unit transaction summaries, products, and product purchases. The call takes a Query object which specifies the query to be made, and returns a QueryResult object. See the documentation for the Query and QueryResult objects for more details.</p><p>On successful execution, a QueryResult will be returned. On an exception, the no QueryResult is returned.</p>]]></documentation>
      <input message="tns:doQuery"/>
      <output message="tns:doQueryResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="getMeasuredValues"><documentation><![CDATA[<p>This function will return a list of measured values close to a given time stamp.</p><p>One measured value is returned per measure key specified in measureKeys, or if an empty array is passed one measured values of each type available is returned. Each measured value will be the latest measured value with a measurement timestamp at or before the timestamp passed, i.e. the timestamp of the measured value returned is guaranteed to have the largest timestamp available which is less than or equal to the timestamp passed. If the timestamp is not specified (timestamp &lt;= 0), the current time will be used as the timestamp. Note that as measured values are measured asynchronously, the timestamp of each measured value returned is likely to differ.</p><p>To return a series of more than one measured value with the same measure key, use doQuery.</p><p>On successful execution, a list of measured values which matches the requested list or if no list is passed a list of all measured values will be returned; in each case, there will only be one measured value with each measure key. On error, an exception will be thrown and no MeasuredValues will be returned.</p>]]></documentation>
      <input message="tns:getMeasuredValues"/>
      <output message="tns:getMeasuredValuesResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="getHypervisorConfig"><documentation><![CDATA[<p>This function returns the hypervisor specific settings for a cluster</p>]]></documentation>
      <input message="tns:getHypervisorConfig"/>
      <output message="tns:getHypervisorConfigResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="setPermissions"><documentation><![CDATA[<p>This function will set the capabilities for the specified group or user on a specific resource.</p><p>All existing permissions are cleared. This call may be used to remove permissions by passing an empty list of permissions, or a copy of the existing list with one or more permissions removed.</p>]]></documentation>
      <input message="tns:setPermissions"/>
      <output message="tns:setPermissionsResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listPermissions"><documentation><![CDATA[<p>This function will fetch an array of permissions matching the specified filter conditions.</p>]]></documentation>
      <input message="tns:listPermissions"/>
      <output message="tns:listPermissionsResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="isPermitted"><documentation><![CDATA[<p>This function will determine whether a specified action on a resource would be permitted.</p>]]></documentation>
      <input message="tns:isPermitted"/>
      <output message="tns:isPermittedResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="addUserToGroup"><documentation><![CDATA[<p>This function adds a user to the specified group.</p>]]></documentation>
      <input message="tns:addUserToGroup"/>
      <output message="tns:addUserToGroupResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="deleteUserFromGroup"><documentation><![CDATA[<p>This function will remove a user from the specified group, or all groups if the group UUID is null.</p>]]></documentation>
      <input message="tns:deleteUserFromGroup"/>
      <output message="tns:deleteUserFromGroupResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="lockUser"><documentation><![CDATA[<p>This function will move a user into the Locked group.</p>]]></documentation>
      <input message="tns:lockUser"/>
      <output message="tns:lockUserResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="unlockUser"><documentation><![CDATA[<p>This function will remove a user from the Locked group.</p>]]></documentation>
      <input message="tns:unlockUser"/>
      <output message="tns:unlockUserResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="updateUser"><documentation><![CDATA[<p>This function will update a user's details and returns the updated user.</p><p>See createUser for comments on plaintext and hashed passwords.</p>]]></documentation>
      <input message="tns:updateUser"/>
      <output message="tns:updateUserResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="publishImage"><documentation><![CDATA[<p>This function will publish an image to a Customer or a Billing Entity.</p>]]></documentation>
      <input message="tns:publishImage"/>
      <output message="tns:publishImageResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="publishResource"><documentation><![CDATA[<p>This function will publish an image to a Customer or a Billing Entity.</p>]]></documentation>
      <input message="tns:publishResource"/>
      <output message="tns:publishResourceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="updateCustomer"><documentation><![CDATA[<p>This function will update an existing customer using the supplied fields and return the updated customer object.</p><p>On an exception, the customer object is not updated and no customer object is returned.</p>]]></documentation>
      <input message="tns:updateCustomer"/>
      <output message="tns:updateCustomerResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="listReferralPromoCode"><documentation><![CDATA[<p>This function will return list of referral promocodes which meets the filter criteria.</p> ]]></documentation>
      <input message="tns:listReferralPromoCode"/>
      <output message="tns:listReferralPromoCodeResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="deleteReferralPromoCode"><documentation><![CDATA[<p>This function will remove the given referral promo code.</p><p>On an exception, the referral promo code is not deleted.</p>]]></documentation>
      <input message="tns:deleteReferralPromoCode"/>
      <output message="tns:deleteReferralPromoCodeResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createReferralPromoCode"><documentation><![CDATA[<p>This function will return a the newly created Referral promocode Object.</p><p>On an exception, the referral promocode is not created.</p> ]]></documentation>
      <input message="tns:createReferralPromoCode"/>
      <output message="tns:createReferralPromoCodeResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createDeploymentTemplate"><documentation><![CDATA[<p>This function will create a deployment template object. On success returns a job</p>]]></documentation>
      <input message="tns:createDeploymentTemplate"/>
      <output message="tns:createDeploymentTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="dryRunTemplate"><documentation><![CDATA[<p>This function will do a dry run on the deployment instance to check if template can be deployed.</p><p>This function will return list of suggested references which can be used when optional references are not found.</p>]]></documentation>
      <input message="tns:dryRunTemplate"/>
      <output message="tns:dryRunTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="deployTemplate"><documentation><![CDATA[<p>This function will deploy a template object.</p>]]></documentation>
      <input message="tns:deployTemplate"/>
      <output message="tns:deployTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="changeDeploymentInstanceStatus"><documentation><![CDATA[<p>This function will change the state of (start, stop, kill or reboot) resources in the deployment instance.</p><p>The 'safe' parameter when set will ensure that a clean shutdown is always performed.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:changeDeploymentInstanceStatus"/>
      <output message="tns:changeDeploymentInstanceStatusResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyDeploymentTemplate"><documentation><![CDATA[<p>This function will modify deployment template.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyDeploymentTemplate"/>
      <output message="tns:modifyDeploymentTemplateResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="modifyDeploymentInstance"><documentation><![CDATA[<p>This function will modify deployment instance.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the resource is not modified.</p>]]></documentation>
      <input message="tns:modifyDeploymentInstance"/>
      <output message="tns:modifyDeploymentInstanceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createDeploymentTemplateFromInstance"><documentation><![CDATA[<p>This function will create deployment template from deployment instance.</p><p>The call may be scheduled for a future date by setting the 'when' parameter.</p><p>On successful execution, a Job object will be returned. On an exception, the template is not created.</p>]]></documentation>
      <input message="tns:createDeploymentTemplateFromInstance"/>
      <output message="tns:createDeploymentTemplateFromInstanceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createBlob"><documentation><![CDATA[<p>This function will create a blob.</p><p>On successful execution it will return the newly created blob.</p>]]></documentation>
      <input message="tns:createBlob"/>
      <output message="tns:createBlobResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="payInvoice"><documentation><![CDATA[<p>This function marks an existing invoice status either pending,paid,unpaid or void.</p><p>On an exception, the invoice is not updated.</p>]]></documentation>
      <input message="tns:payInvoice"/>
      <output message="tns:payInvoiceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="createPaymentMethodInstance"><documentation><![CDATA[Creates a payment method instance]]></documentation>
      <input message="tns:createPaymentMethodInstance"/>
      <output message="tns:createPaymentMethodInstanceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="resumeTransaction"><documentation><![CDATA[<p>Resumes a transaction which was awaiting interactive input.</p><p>The configured values are not passed to this method as any required data should have been stored by Lua in the transaction.</p>]]></documentation>
      <input message="tns:resumeTransaction"/>
      <output message="tns:resumeTransactionResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="cancelTransaction"><documentation><![CDATA[Cancels a transaction.]]></documentation>
      <input message="tns:cancelTransaction"/>
      <output message="tns:cancelTransactionResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="testPaymentMethod"><documentation><![CDATA[Tests a payment method.]]></documentation>
      <input message="tns:testPaymentMethod"/>
      <output message="tns:testPaymentMethodResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="purchaseUnits"><documentation><![CDATA[<p>This function will purchase the specified number of units using the payment method instance.</p>]]></documentation>
      <input message="tns:purchaseUnits"/>
      <output message="tns:purchaseUnitsResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="renderInvoice"><documentation><![CDATA[<p>This function will return Invoice/Credit note PDF in Base64 format</p>]]></documentation>
      <input message="tns:renderInvoice"/>
      <output message="tns:renderInvoiceResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
    <operation name="getBlobContent"><documentation><![CDATA[<p>This function will return blob content for a given blob</p>]]></documentation>
      <input message="tns:getBlobContent"/>
      <output message="tns:getBlobContentResponse"/>
      <fault message="tns:ExtilityException" name="ExtilityException"/>
    </operation>
  </portType>
  <binding name="UserServicePortBinding" type="tns:UserService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="createGroup">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="fetchResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="fetchServer">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="fetchDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="addKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="revertToResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createServer">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyServer">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="attachDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="detachDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="attachNetworkInterface">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="detachNetworkInterface">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="attachSSHKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="detachSSHKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="changeServerStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="openVNCConnection">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createSnapshot">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifySnapshot">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createNetwork">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyNetwork">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="attachSubnet">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createSubnet">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifySubnet">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createFirewallTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyFirewallTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="applyFirewallTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createSSHKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifySSHKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createNetworkInterface">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyGroup">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyNetworkInterface">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyPaymentMethodInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="addIP">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeIP">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createVDC">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyVDC">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createImage">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyImage">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyFirewall">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="cancelJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="waitForJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="getResourceTypes">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listResources">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMetadata">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listProductPurchases">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listUnitTransactions">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listUnitTransactionSummary">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listStatementDetail">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="revokeImage">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="revokeResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="cloneResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="doQuery">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="getMeasuredValues">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="getHypervisorConfig">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="setPermissions">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listPermissions">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="isPermitted">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="addUserToGroup">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteUserFromGroup">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="lockUser">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="unlockUser">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateUser">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="publishImage">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="publishResource">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateCustomer">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="listReferralPromoCode">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteReferralPromoCode">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createReferralPromoCode">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createDeploymentTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="dryRunTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="deployTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="changeDeploymentInstanceStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyDeploymentTemplate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="modifyDeploymentInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createDeploymentTemplateFromInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createBlob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="payInvoice">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="createPaymentMethodInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="resumeTransaction">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="cancelTransaction">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="testPaymentMethod">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="purchaseUnits">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="renderInvoice">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
    <operation name="getBlobContent">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ExtilityException">
        <soap:fault name="ExtilityException" use="literal"/>
      </fault>
    </operation>
  </binding>
  <service name="UserAPI"><documentation><![CDATA[This is the API for the Extility user service. You need to be a authenticated as a valid user to use this service.]]></documentation>
    <port binding="tns:UserServicePortBinding" name="UserServicePort">
      <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
    </port>
  </service>
</definitions>